name: entryTracker_CI

on:
  push:
    branches:
      - main

jobs:
  build-and-test-local:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Load env variables
        run: |
          set -a
          source .env
          set +a

      - name: Start MySQL container (for local testing)
        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} -e MYSQL_DATABASE=${DB_NAME} -p 3306:3306 mysql:5.7
        

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            docker exec mysql mysqladmin ping -h localhost --silent && break
            sleep 5
          done

      - name: Run Flask app and test (local)
        run: |
          python app.py &
          for i in {1..10}; do
            curl -f http://localhost:5000 && break || sleep 5
          done

      - name: Stop and remove MySQL container
        run: |
          docker stop mysql
          docker rm mysql


  docker-compose-test-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Start Docker Compose for E2E test
        run: docker compose up --build -d

      - name: Curl the container (E2E)
        run: |
          for i in {1..10}; do
            curl -f http://localhost:5000 && break || sleep 5
          done

      - name: Show logs on failure
        if: failure()
        run: docker compose logs

      - name: Shutdown Docker Compose
        run: docker compose down

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ap-south-1

      - name: Authenticate Docker to AWS ECR
        run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 923918898299.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker image for ECR
        run: docker build -t entrytracker .

      - name: Tag Docker image for ECR
        run: docker tag entrytracker:latest 923918898299.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest

      - name: Push Docker image to ECR
        run: docker push 923918898299.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/entrytracker
            cd /home/ubuntu/entrytracker
            if [ ! -d .git ]; then
              git clone https://github.com/misha-philip/simple-CI-CD-entryTracker.git .
            fi
            cat > docker-compose.yaml << 'EOF'
            services:
              entrytracker:
                image: 923918898299.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest
                container_name: entrytracker-app
                env_file:
                  - .env
                ports:
                  - "5000:5000"
                depends_on:
                  mysql:
                    condition: service_healthy
                healthcheck:
                  test: ["CMD", "curl", "--fail",  "http://localhost:5000"]
                  interval: 20s
                  timeout: 10s
                  retries: 5
                  start_period: 10s

              mysql:
                image: mysql:5.7
                container_name: mysql
                env_file:
                  - .env
                ports:
                  - "3306:3306"
                volumes:
                  - db-data:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

            volumes:
              db-data:
            'EOF'
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 923918898299.dkr.ecr.ap-south-1.amazonaws.com
            docker compose pull
            docker compose down
            docker compose up -d
