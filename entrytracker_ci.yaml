name: entryTracker_CI

on:
  push:
    branches:
      - main

jobs:
  build-and-test-local:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start MySQL container (for local testing)
        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=app_db -p 3306:3306 mysql:5.7

      - name: Wait for MySQL to be ready
        run: sleep 20

      - name: Run Flask app and test (local)
        run: |
          python app.py &
          sleep 10
          curl http://localhost:5000

      - name: Stop and remove MySQL container
        run: |
          docker stop mysql
          docker rm mysql

  docker-build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t entrytracker:latest .

      - name: Start MySQL container (for Docker app test)
        run: docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=app_db -p 3306:3306 mysql:5.7

      - name: Wait for MySQL to be ready
        run: sleep 20

      - name: Run Flask app Docker container
        run: docker run -d --name entrytracker-app -p 5000:5000 -e DB_HOST=mysql -e DB_USER=root -e DB_PASSWORD=password -e DB_NAME=app_db --link mysql entrytracker:latest

      - name: Wait for app to be ready
        run: sleep 10

      - name: Curl to test Docker app
        run: curl http://localhost:5000

      - name: Stop and remove containers
        run: |
          docker stop entrytracker-app mysql
          docker rm entrytracker-app mysql

  docker-compose-test-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Start Docker Compose for E2E test
        run: docker compose up --build -d

      - name: Wait for app to be healthy
        run: |
          for i in {1..10}; do
            curl -f http://localhost:5000 && break || sleep 5
          done

      - name: Curl the container (E2E)
        run: curl http://localhost:5000

      - name: Shutdown Docker Compose
        run: docker compose down

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ap-south-1

      - name: Authenticate Docker to AWS ECR
        run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 923918898299.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker image for ECR
        run: docker build -t entrytracker .

      - name: Tag Docker image for ECR
        run: docker tag entrytracker:latest 923918898299.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest

      - name: Push Docker image to ECR
        run: docker push 923918898299.dkr.ecr.ap-south-1.amazonaws.com/entrytracker:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/entrytracker
            git pull origin main
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 923918898299.dkr.ecr.ap-south-1.amazonaws.com
            docker-compose pull
            docker-compose down
            docker-compose up -d
